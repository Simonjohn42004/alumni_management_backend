// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String     @id
  roleId          Int
  fullName        String
  email           String     @unique
  passwordHash    String     @unique
  phoneNumber     String     @unique
  profilePicture  String?
  graduationYear  Int
  currentPosition String?
  createdAt       DateTime   @default(now())
  collegeId       Int
  department      Department
  skillSets       String[]

  posts          Posts[]
  postLikes      PostLikes[]
  postComments   PostComments[]
  postTagsTagged PostTags[]     @relation("TaggedUser")
  postTagsBy     PostTags[]     @relation("TaggedByUser")
  postSaves      PostSaves[]

  educations Educations[]
}

enum Department {
  COMPUTER_SCIENCE_ENGINEERING
  COMPUTER_SCIENCE_BUSINESS_SYSTEMS
  ARTIFICIAL_INTELLIGENCE_DATA_SCIENCE
  ARTIFICIAL_INTELLIGENCE_MACHINE_LEARNING
  MECHANICAL_AUTOMATION_ENGINEERING
  INTERNET_OF_THINGS
  CYBERSECURITY
  COMPUTER_COMMUNICATION_ENGINEERING
  ELECTRICAL_INSTRUMENTATION_ENGINEERING
  INSTRUMENTATION_CONTROL_ENGINEERING
  INFORMATION_TECHNOLOGY
  MECHANICAL_ENGINEERING
  ELECTRICAL_ELECTRONICS_ENGINEERING
  CIVIL_ENGINEERING
  ELECTRONICS_COMMUNICATION_ENGINEERING
}

model Educations {
  id           Int      @id @default(autoincrement())
  userId       String
  schoolName   String
  degree       String
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime
  cgpa         Decimal  @db.Decimal(3, 2)
  description  String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolName, degree])
}

model Posts {
  id         Int      @id @default(autoincrement())
  authorId   String
  title      String
  content    String?
  createdAt  DateTime @default(now())
  collegeId  Int
  media_urls String[]

  author       Users          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postTags     PostTags[]
  postLikes    PostLikes[]
  postComments PostComments[]
  postSaves    PostSaves[]
}

model PostTags {
  id           Int      @id @default(autoincrement())
  postId       Int // Required: tag belongs to this post
  commentId    Int? // Optional: tag belongs to a comment if not null
  taggedUserId String // The user being tagged
  taggedBy     String // The user who tagged
  taggedAt     DateTime @default(now())

  post    Posts         @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment PostComments? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  taggedUser   Users @relation("TaggedUser", fields: [taggedUserId], references: [id], onDelete: Cascade)
  taggedByUser Users @relation("TaggedByUser", fields: [taggedBy], references: [id], onDelete: Cascade)

  @@unique([postId, taggedUserId, taggedBy]) // prevent duplicate tag on post by same user
}

model PostComments {
  id          Int      @id @default(autoincrement()) // Add this unique id field
  postId      Int
  commenterId String
  comment     String
  createdAt   DateTime @default(now())

  post      Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  commenter Users @relation(fields: [commenterId], references: [id], onDelete: Cascade)

  PostTags PostTags[]
}

model PostLikes {
  postId  Int
  userId  String
  likedAt DateTime @default(now())

  post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model PostSaves {
  postId  Int
  savedBy String
  savedAt DateTime @default(now())

  post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  user Users @relation(fields: [savedBy], references: [id], onDelete: Cascade)

  @@id([postId, savedBy])
}

model Roles {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  Permissions Permissions[]

  @@map("roles")
}

// Enum with the given feature names
enum FeatureName {
  chats
  profiles
  posts
  fundraising
  events
  announcements
}

// Permissions model with foreign key relation to Roles and enum for featureName
model Permissions {
  id           Int         @id @default(autoincrement())
  roleId       Int
  featureName  FeatureName
  canCreate    Boolean     @default(false)
  canRead      Boolean     @default(false)
  canUpdateOwn Boolean     @default(false)
  canUpdateAny Boolean     @default(false)
  canDeleteOwn Boolean     @default(false)
  canDeleteAny Boolean     @default(false)

  role Roles @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, featureName])
  @@map("permissions")
}
