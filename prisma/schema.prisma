generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String           @id
  roleId          Int
  fullName        String
  email           String           @unique
  passwordHash    String           @unique
  phoneNumber     String           @unique
  profilePicture  String?
  graduationYear  Int
  currentPosition String?
  createdAt       DateTime         @default(now())
  collegeId       Int
  department      Department
  skillSets       String[]
  Campaign        Campaign[]
  CampaignUpdate  CampaignUpdate[]
  Donation        Donation[]
  educations      Educations[]
  postComments    PostComments[]
  postLikes       PostLikes[]
  postSaves       PostSaves[]
  postTagsBy      PostTags[]       @relation("TaggedByUser")
  postTagsTagged  PostTags[]       @relation("TaggedUser")
  posts           Posts[]
  role            Roles            @relation(fields: [roleId], references: [id])

  // New relations for jobs and internships
  postedJobs             Job[]
  postedInternships      Internship[]
  jobApplications        JobApplication[]
  internshipApplications InternshipApplication[]
}

model Educations {
  schoolName   String
  degree       String
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime
  cgpa         Decimal  @db.Decimal(3, 2)
  description  String?
  userId       String
  id           Int      @id @default(autoincrement())
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolName, degree])
}

model Posts {
  id           Int            @id @default(autoincrement())
  authorId     String
  title        String
  content      String?
  createdAt    DateTime       @default(now())
  collegeId    Int
  media_urls   String[]
  postComments PostComments[]
  postLikes    PostLikes[]
  postSaves    PostSaves[]
  postTags     PostTags[]
  author       Users          @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model PostTags {
  postId       Int
  taggedUserId String
  taggedBy     String
  taggedAt     DateTime      @default(now())
  commentId    Int?
  id           Int           @id @default(autoincrement())
  comment      PostComments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post         Posts         @relation(fields: [postId], references: [id], onDelete: Cascade)
  taggedByUser Users         @relation("TaggedByUser", fields: [taggedBy], references: [id], onDelete: Cascade)
  taggedUser   Users         @relation("TaggedUser", fields: [taggedUserId], references: [id], onDelete: Cascade)

  @@unique([postId, taggedUserId, taggedBy])
}

model PostComments {
  postId      Int
  commenterId String
  comment     String
  createdAt   DateTime   @default(now())
  id          Int        @id @default(autoincrement())
  commenter   Users      @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  post        Posts      @relation(fields: [postId], references: [id], onDelete: Cascade)
  PostTags    PostTags[]
}

model PostLikes {
  postId  Int
  userId  String
  likedAt DateTime @default(now())
  post    Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model PostSaves {
  postId  Int
  savedBy String
  savedAt DateTime @default(now())
  post    Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    Users    @relation(fields: [savedBy], references: [id], onDelete: Cascade)

  @@id([postId, savedBy])
}

model Roles {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  Users       Users[]
  Permissions Permissions[]

  @@map("roles")
}

model Permissions {
  id           Int         @id @default(autoincrement())
  roleId       Int
  canCreate    Boolean     @default(false)
  canRead      Boolean     @default(false)
  canDeleteAny Boolean     @default(false)
  canDeleteOwn Boolean     @default(false)
  canUpdateAny Boolean     @default(false)
  canUpdateOwn Boolean     @default(false)
  featureName  FeatureName
  role         Roles       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, featureName])
  @@map("permissions")
}

model Campaign {
  id            Int                @id @default(autoincrement())
  title         String
  description   String
  goalAmount    Decimal            @db.Decimal(10, 2)
  currentAmount Decimal            @default(0) @db.Decimal(10, 2)
  startDate     DateTime
  endDate       DateTime
  status        CampaignStatus     @default(ACTIVE)
  creatorId     String
  createdAt     DateTime           @default(now())
  creator       Users              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  categories    CampaignCategory[]
  updates       CampaignUpdate[]
  donations     Donation[]
  rewards       Reward[]

  @@index([creatorId])
}

model Donation {
  id                Int               @id @default(autoincrement())
  campaignId        Int
  donorId           String
  amount            Decimal           @db.Decimal(10, 2)
  donationDate      DateTime          @default(now())
  paymentMethod     String
  transactionStatus TransactionStatus @default(PENDING)
  campaign          Campaign          @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  donor             Users             @relation(fields: [donorId], references: [id], onDelete: Cascade)
  paymentDetails    PaymentDetails?

  @@index([campaignId])
  @@index([donorId])
}

model PaymentDetails {
  id                Int           @id @default(autoincrement())
  donationId        Int           @unique
  paymentProvider   String
  paymentStatus     PaymentStatus
  transactionDate   DateTime      @default(now())
  paymentReference  String?
  razorpayOrderId   String? // recommended
  razorpayPaymentId String? // recommended
  razorpaySignature String? // recommended
  errorMessage      String? // optional
  donation          Donation      @relation(fields: [donationId], references: [id], onDelete: Cascade)
}

model Reward {
  id            Int      @id @default(autoincrement())
  campaignId    Int
  description   String
  minimumAmount Decimal  @db.Decimal(10, 2)
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model CampaignUpdate {
  id         Int      @id @default(autoincrement())
  campaignId Int
  userId     String
  updateText String
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  campaigns CampaignCategory[]
}

model CampaignCategory {
  id         Int      @id @default(autoincrement())
  campaignId Int
  categoryId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([campaignId, categoryId])
}

enum Department {
  COMPUTER_SCIENCE_ENGINEERING
  COMPUTER_SCIENCE_BUSINESS_SYSTEMS
  ARTIFICIAL_INTELLIGENCE_DATA_SCIENCE
  ARTIFICIAL_INTELLIGENCE_MACHINE_LEARNING
  MECHANICAL_AUTOMATION_ENGINEERING
  INTERNET_OF_THINGS
  CYBERSECURITY
  COMPUTER_COMMUNICATION_ENGINEERING
  ELECTRICAL_INSTRUMENTATION_ENGINEERING
  INSTRUMENTATION_CONTROL_ENGINEERING
  INFORMATION_TECHNOLOGY
  MECHANICAL_ENGINEERING
  ELECTRICAL_ELECTRONICS_ENGINEERING
  CIVIL_ENGINEERING
  ELECTRONICS_COMMUNICATION_ENGINEERING
  ADMINISTRATION
}

enum FeatureName {
  chats
  profiles
  posts
  fundraising
  events
  announcements
  postComments
  postLikes
  postSaves
  donations
  rewards
  campaignUpdates
  paymentDetails
  campaignCategories
  jobs
  jobApplications
  internships
  internshipApplications
}

enum CampaignStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

model Job {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  location       String?
  salary         Decimal?         @db.Decimal(10, 2)
  employmentType EmploymentType
  postedById     String
  postedBy       Users            @relation(fields: [postedById], references: [id], onDelete: Cascade)
  postedAt       DateTime         @default(now())
  applications   JobApplication[]
  tags           String[] // flexible skill/tags, can be normalized later
  isActive       Boolean          @default(true)
}

model Internship {
  id             Int                     @id @default(autoincrement())
  title          String
  description    String
  location       String?
  stipend        Decimal?                @db.Decimal(10, 2)
  durationMonths Int?
  postedById     String
  postedBy       Users                   @relation(fields: [postedById], references: [id], onDelete: Cascade)
  postedAt       DateTime                @default(now())
  applications   InternshipApplication[]
  tags           String[] // flexible skill/tags, can be normalized later
  isActive       Boolean                 @default(true)
}

model JobApplication {
  id          Int               @id @default(autoincrement())
  jobId       Int
  applicantId String
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicant   Users             @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@unique([jobId, applicantId])
}

model InternshipApplication {
  id           Int               @id @default(autoincrement())
  internshipId Int
  applicantId  String
  status       ApplicationStatus @default(PENDING)
  appliedAt    DateTime          @default(now())
  internship   Internship        @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  applicant    Users             @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@unique([internshipId, applicantId])
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  FREELANCE
  REMOTE
  OTHER
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  INTERVIEW
  REJECTED
  ACCEPTED
  CANCELLED
  WITHDRAWN
}
